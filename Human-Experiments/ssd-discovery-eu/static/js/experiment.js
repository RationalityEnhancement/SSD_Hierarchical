// Generated by CoffeeScript 2.4.1
// coffeelint: disable=max_line_length, indentation
var BLOCKS, CONDITION, DEBUG, DEMO, DEMO_TRIALS, MIN_TIME, N_TRIAL, PARAMS, RETURN_TIME, SCORE, SHOW_PARTICIPANT, SHOW_PARTICIPANT_DATA, STAGE, STAGE1, STAGE2, STRUCTURE_TEST, STRUCTURE_TRAINING, TALK, TRIALS_TEST, TRIALS_TRAINING, TUTOR_DEMO, calculateBonus, condition, createStartButton, delay, getTestTrials, getTrainingTrials, initializeExperiment, loadTimeout, principle_only, psiturk, saveData, slowLoad, with_demo, with_feedback, with_practice, workerId;

BLOCKS = void 0;

TRIALS_TRAINING = void 0;

TRIALS_TEST = void 0;

DEMO_TRIALS = void 0;

STRUCTURE_TEST = void 0;

STRUCTURE_TRAINING = void 0;

N_TRIAL = void 0;

SCORE = 0;

calculateBonus = void 0;

getTrainingTrials = void 0;

getTestTrials = void 0;

DEBUG = false;

TALK = false;

SHOW_PARTICIPANT = false;

STAGE = 1;

TUTOR_DEMO = false;

STAGE1 = STAGE === 1;

DEMO = true;

if (DEBUG) {
  console.log("X X X X X X X X X X X X X X X X X\n X X X X X DEBUG  MODE X X X X X\nX X X X X X X X X X X X X X X X X");
  condition = 0;
  workerId = ['debugV3Vl2'];
} else {
  console.log("# =============================== #\n# ========= NORMAL MODE ========= #\n# =============================== #");
//  condition = getRandomInt(3);
}

if (mode === "{{ mode }}") {
  // Viewing experiment not through the PsiTurk server
  DEMO = true;
  condition = getRandomInt(3);
  workerId = ['debugV3Vl2'];
}

// counterbalance = 0
if (TUTOR_DEMO) {
  condition = 1;
  DEMO = true;
  STAGE = 1;
}

CONDITION = parseInt(condition);
//CONDITION = 0;

_.mapObject = mapObject;

//_.compose = _.flowRight
//SHOW_PARTICIPANT_DATA = '0/108'
SHOW_PARTICIPANT_DATA = false;

/*
All Mouselab-MDP trials will be demonstration trials
with data for the given participant. The coding is
CONDITION/PID and you can find the available codes
in exp1/static/json/data/1B.0/traces
*/
no_demo = CONDITION === 0;
nonhier = CONDITION === 1; // without hierarchical
hier = CONDITION === 2; // with hierarchy

feedback = false;
with_feedback = feedback;
PARAMS = {
  feedback: with_feedback,
  inspectCost: 1,
  condition: condition,
  bonusRate: .001,
  maxBonus: 4.0,
  delay_hours: 24,
  delay_window: 12,
  branching: '2_36',
  non_hier_branching: '312',
  with_feedback: with_feedback,
  condition: CONDITION,
  startTime: Date(Date.now()),
  stage: 1,
  basepay: 1.2
};

if(CONDITION == 0)
{
  condition_type = 'no_demo'
}
else if(CONDITION == 1)
{
  condition_type = 'Non-Hierarchical'
}
else
{
  condition_type = 'Hierarchical'
}

console.log('Condition: ', condition_type)

MIN_TIME = 7;

BASEPAY = PARAMS.basepay;

DEMO_BONUS = 0.0;

function getRandomInt(max) {
  return Math.floor(Math.random() * Math.floor(max));
}
// theta_hat_condition = getRandomInt(6);
// random_theta_index = getRandomInt(3);

// console.log('Theta_hat condition:', theta_hat_condition);
// console.log('Theta index:', random_theta_index);
console.log('condition', CONDITION);
console.log('mode', mode);

psiturk = new PsiTurk(uniqueId, adServerLoc, mode);

psiturk.recordUnstructuredData('start_time', PARAMS.startTime);

psiturk.recordUnstructuredData('condition_type', PARAMS.condition_type)

psiturk.recordUnstructuredData('condition', CONDITION);

// psiturk.recordUnstructuredData('theta_hat_condition', theta_hat_condition);

// psiturk.recordUnstructuredData('random_theta_condition', random_theta_index);

delay = function(time, func) {
  return setTimeout(func, time);
};

// $(window).resize -> checkWindowSize 920, 720, $('#jspsych-target')
// $(window).resize()
slowLoad = function() {
  var ref;
  return (ref = $('slow-load')) != null ? ref.show() : void 0;
};

loadTimeout = delay(12000, slowLoad);

createStartButton = function() {
  if (DEBUG) {
    initializeExperiment();
    return;
  }
  document.getElementById("loader").style.display = "none";
  document.getElementById("successLoad").style.display = "block";
  document.getElementById("failLoad").style.display = "none";
  return $('#load-btn').click(initializeExperiment);
};

saveData = function() {
  return new Promise(function(resolve, reject) {
    var timeout;
    timeout = delay(10000, function() {
      return reject('timeout');
    });
    return psiturk.saveData({
      error: function() {
        clearTimeout(timeout);
        console.log('Error saving data!');
        return reject('error');
      },
      success: function() {
        clearTimeout(timeout);
        console.log('Data saved to psiturk server.');
        return resolve();
      }
    });
  });
};

$(window).resize(function() {
  return checkWindowSize(1200, 600, $('#jspsych-target')); // frederic
});

$(window).resize();

$(window).on('load', function() {
  // Load data and test connection to server.
  slowLoad = function() {
    var ref;
    return (ref = $('slow-load')) != null ? ref.show() : void 0;
  };
  loadTimeout = delay(12000, slowLoad);
  psiturk.preloadImages(['static/images/spider.png', 'static/images/web.png', 'static/images/web_text.png', 'static/images/web_revealed.png']);
  return delay(300, function() {
    var id;
    console.log('Loading data');
    if (PARAMS.variance) {
      id = `${PARAMS.branching}`;
    } else {
      id = `${PARAMS.branching}`;
    }

//    if (STAGE1) {
//
//      STRUCTURE_TRAINING = loadJson("static/json/structure/2_36.json");
//      training_json = "static/json/rewards/2_36.json";
//      // training_json = "static/json/rewards/2_36" + theta_hat_condition.toString() + "_" + random_theta_index.toString() + ".json";
//      TRIAS_TEST = loadJson(training_json);
//    }

    if (DEBUG || TALK) {
      createStartButton();
      return clearTimeout(loadTimeout);
    } else {
      if (DEMO) {
        clearTimeout(loadTimeout);
        return delay(500, createStartButton);
      } else {
        console.log('Testing saveData');
        return saveData().then(function() {
          clearTimeout(loadTimeout);
          return delay(500, createStartButton);
        }).catch(function() {
          clearTimeout(loadTimeout);
          return $('#data-error').show();
        });
      }
    }
  });
});

createStartButton = function() {
  if (DEBUG || TALK) {
    initializeExperiment();
    return;
  }
  if (DEMO && !TUTOR_DEMO) {
    $('#jspsych-target').append("<div class='alert alert-info'>\n   To start the experiment click <b>Begin</b> below.\n</div>\n<div class='center'>\n  <button class='btn btn-primary btn-lg centered' id=\"Begin\">Begin</button>\n</div>");
    $('#Begin').click(function() {
      SHOW_PARTICIPANT = true;
      if(CONDITION == 1)
      {
        TRAIN_STRUCTURE_TRAINING = loadJson("static/json/structure/312.json");
        TEST_STRUCTURE_TRAINING = loadJson("static/json/structure/2_36.json");
        training_json = "static/json/rewards/2_36.json";
        TRIALS_TEST = loadJson(training_json);
        console.log('Length of TRIALS_TEST: '+ TRIALS_TEST.length);
        // DEMO_TRIALS = loadJson("static/json/nonhier_demo/2_36_" + theta_hat_condition.toString() + ".json");
        console.log('Condition 1');
        DEMO_TRIALS = loadJson("static/json/nonhier_demo/312.json");

      }
      else if (CONDITION == 2)
      {
        // DEMO_TRIALS = loadJson("static/json/demo/2_36_" + theta_hat_condition.toString() + ".json");
        TRAIN_STRUCTURE_TRAINING = loadJson("static/json/structure/2_36.json");
        TEST_STRUCTURE_TRAINING = loadJson("static/json/structure/2_36.json");
        training_json = "static/json/rewards/2_36.json";
        TRIALS_TEST = loadJson(training_json);
        console.log('Length of TRIALS_TEST: '+ TRIALS_TEST.length);
        console.log('Condition 2');
        DEMO_TRIALS = loadJson("static/json/demo/2_36.json");
      }
      else
      {
        // DEMO_TRIALS = loadJson("static/json/demo/2_36_" + theta_hat_condition.toString() + ".json");
        TRAIN_STRUCTURE_TRAINING = loadJson("static/json/structure/2_36.json");
        TEST_STRUCTURE_TRAINING = loadJson("static/json/structure/2_36.json");
        console.log('Condition Else');
        console.log(CONDITION)
        training_json = "static/json/rewards/2_36.json";
        TRIALS_TEST = loadJson(training_json);
        DEMO_TRIALS = loadJson("static/json/demo/2_36.json");
      }
      console.log('Demo trials loaded');
      return initializeExperiment();
    });
  }
  $('#load-icon').hide();
  $('#slow-load').hide();
  $('#success-load').hide();
  //return $('#load-btn').click(initializeExperiment);
};

initializeExperiment = function() {
  var Block, ButtonBlock, MouselabBlock, QuizLoop, TextBlock, ask_email, bonus_text, check_code, check_returning, demo, demo_basic1, demo_basic2, demo_basic3, demo_basic4, demo_basic5, divider, divider_pretest_training, divider_training_test, experiment_timeline, finish, fullMessage, img, instruct_loop, instruct_loop_posttest, instructions, instructions_posttest, play_next_time, post_test, pre_test_intro1, pre_test_intro2, principle1, principle2, principle3, principle4, principle5, prompt_resubmit, quiz, quiz_posttest, refresher1, refresher2, reprompt, reset_score, retention_instruction, save_data, survey, talk_demo, test_block_intro, text, train_basic1, train_basic2, train_basic3, train_basic4_FB, train_basic4_noFB, training_no_FB, training_with_FB, verbal_responses;
  $('#jspsych-target').html('');
  console.log('INITIALIZE EXPERIMENT');
  console.log(CONDITION);
  //  ======================== #
  //  ========= TEXT ========= #
  //  ======================== #

  // These functions will be executed by the jspsych plugin that
  // they are passed to. String interpolation will use the values
  // of global variables defined in this file at the time the function
  // is called.
  text = {
    debug: function() {
      if (DEBUG) {
        return "`DEBUG`";
      } else {
        return '';
      }
    },
    feedback: function() {
        return "";
      }
  };

  // ================================= #
  // ========= BLOCK CLASSES ========= #
  // ================================= #
  Block = class Block {
    constructor(config) {
      _.extend(this, config);
      this._block = this; // allows trial to access its containing block for tracking state
      if (this._init != null) {
        this._init();
      }
    }

  };

  TextBlock = (function() {
    class TextBlock extends Block {};

    TextBlock.prototype.type = 'text';

    TextBlock.prototype.cont_key = [];

    return TextBlock;

  }).call(this);

  ButtonBlock = (function() {
    class ButtonBlock extends Block {};

    ButtonBlock.prototype.type = 'button-response';

    ButtonBlock.prototype.is_html = true;

    ButtonBlock.prototype.choices = ['Continue'];

    ButtonBlock.prototype.button_html = '<button class="btn btn-primary btn-lg">%choice%</button>';

    return ButtonBlock;

  }).call(this);

  QuizLoop = class QuizLoop extends Block {
    loop_function(data) {
      var c, i, len, ref;
      console.log('data', data);
      ref = data[data.length].correct;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (!c) {
          return true;
        }
      }
      return false;
    }

  };

  DemoBlock = (function() {
    class DemoBlock extends Block {};

    DemoBlock.prototype.type = 'mouselab-mdp';

    DemoBlock.prototype.playerImage = 'static/images/spider.png';

    DemoBlock.prototype.ExtraImage = 'static/images/theta-hat.png';
    DemoBlock.prototype.lowerMessage = "Clicking on a node reveals its value for a $1 fee.<br><br>To move above:<br>Press 1: move to left most node  or if only possible path from current node<br>Press 2: move to second node from left from current node<br>Press 3: move to third node from left from current node <br> Press 4: move to fourth node from left from current node <br>Try using the keys on the top of your keyboard if the numpad keys don't work.";

    return DemoBlock;

  }).call(this);

  DemoBlock_gs = (function() {
    class DemoBlock_gs extends Block {};

    DemoBlock_gs.prototype.type = 'mouselab-mdp-gs';

    DemoBlock_gs.prototype.playerImage = 'static/images/spider.png';

    DemoBlock_gs.prototype.ExtraImage = 'static/images/theta-hat.png';
    DemoBlock_gs.prototype.lowerMessage = "Clicking on a node reveals its value for a $1 fee.<br><br>To move above:<br>Press 1: move to left most node  or if only possible path from current node<br>Press 2: move to second node from left from current node<br>Press 3: move to third node from left from current node <br> Press 4: move to fourth node from left from current node <br>Try using the keys on the top of your keyboard if the numpad keys don't work.";

    return DemoBlock_gs;

  }).call(this);

  DemoBlock_hier = (function() {
    class DemoBlock_hier extends Block {};

    DemoBlock_hier.prototype.type = 'mouselab-mdp-hier';

    DemoBlock_hier.prototype.playerImage = 'static/images/spider.png';

    DemoBlock_hier.prototype.ExtraImage = 'static/images/theta-hat.png';
    DemoBlock_hier.prototype.lowerMessage = "Clicking on a node reveals its value for a $1 fee.<br><br>To move above:<br>Press 1: move to left most node  or if only possible path from current node<br>Press 2: move to second node from left from current node<br>Press 3: move to third node from left from current node <br> Press 4: move to fourth node from left from current node <br>Try using the keys on the top of your keyboard if the numpad keys don't work.";

    return DemoBlock_hier;

  }).call(this);
  //_init: ->
  //_.extend(this, STRUCTURE)
  //  @trialCount = 0
 MouselabBlockTrace = (function() {
    class MouselabBlockTrace extends DemoBlock {};

    MouselabBlockTrace.prototype.lowerMessage = "<b>Follow the revealed path by using the arrow keys</b> <br><br>To move above:<br>Press 1: move to left most node  or if only possible path from current node<br>Press 2: move to second node from left from current node<br>Press 3: move to third node from left from current node <br> Press 4: move to fourth node from left from current node<br>Try using the keys on the top of your keyboard if the numpad keys don't work.";
    //MouselabBlock.prototype.showImage = false;
    // moveDelay: PARAMS.moveDelay
    // clickDelay: PARAMS.clickDelay
    // moveEnergy: PARAMS.moveEnergy
    // clickEnergy: PARAMS.clickEnergy

    return MouselabBlockTrace;
  }).call(this);

  MouselabBlock = (function() {
    class MouselabBlock extends DemoBlock {};

    MouselabBlock.prototype.lowerMessage = "Clicking on a node reveals its value for a $1 fee.<br><br>To move above:<br>Press 1: move to left most node  or if only possible path from current node<br>Press 2: move to second node from left from current node<br>Press 3: move to third node from left from current node <br> Press 4: move to fourth node from left from current node<br>Try using the keys on the top of your keyboard if the numpad keys don't work.";
    //MouselabBlock.prototype.showImage = false;

    // moveDelay: PARAMS.moveDelay
    // clickDelay: PARAMS.clickDelay
    // moveEnergy: PARAMS.moveEnergy
    // clickEnergy: PARAMS.clickEnergy

    return MouselabBlock;

  }).call(this);


  //  ============================== #
  //  ========= EXPERIMENT ========= #
  //  ============================== #
  img = function(name) {
    return `<img class='display' src='static/images/${name}.png'/>`;
  };


  QuizLoop = class QuizLoop extends Block {
    loop_function(data) {
      var c, i, len, ref;
      console.log('data', data);
      ref = data[data.length].correct;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (!c) {
          return true;
        }
      }
      return false;
    }

  };

  check_code = new Block({
    type: 'secret-code',
    code: 'elephant'
  });

  instructions_posttest = new TextBlock({
    text: function() {
      SCORE = 0;
      return markdown("## Final information about the *Web of Cash* game\n\n- Each node of the spider web may contain a reward of up to $96 or a loss of up to $-96.\n- The nodes' values change from each round to the next. A node that contain a loss in one round may contain a reward in the next round and vice versa.\n- You can use the node inspector to find out how much money you gain or lose if you enter a particular node.\n- Using the node inspector costs $1 per click.\n- You will receive a bonus whose value depends on how well you perform in this task.");
    }
  });
  refresher1 = new TextBlock({
    text: function() {
      return markdown("  <h1> Web of Cash</h1>\n\n  In this HIT, you will play a game called *Web of Cash*. You will guide a\n  money-loving spider through a spider web. When you land on a gray circle\n  (a ***node***) the value of the node is added to your score.\n\n  You will be able to move the spider with the arrow keys, but only in the direction\n  of the arrows between the nodes. The image below shows the web that you will be navigating when the game starts.\n\n <img class='display' style=\"width:50%; height:auto\" src='static/images/web-of-cash-unrevealed.png'/>\n\n<div align=\"center\">Press <code>space</code> to proceed.</div>");
    }
  });
  refresher2 = new TextBlock({
    text: function() {
      return markdown("<h1> Web of Cash</h1>\n\nIt's hard to make good decision when you can't see what you will get!\nFortunately, you will have access to a ***node inspector*** which can reveal\nthe value of a node. \n\nTo use the node inspector, simply ***click on a node***. The image below illustrates how this works, and you can try this out on the **next** screen. \n\n**Note:** You can only use the node inspector when you're on the first\nnode. \n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/web-of-cash.png'/>\n\nOne more thing: **You must spend *at least* 7 seconds on each round.**\nIf you finish a round early, you'll have to wait until 7 seconds have\npassed.      \n\n<div align=\"center\"> Press <code>space</code> to continue. </div>\n");
    }
  });
  quiz_posttest = new Block({
    preamble: function() {
      return markdown("# Quiz\n\nPlease answer the following questions about the *Web of Cash* game.\n");
    },
    type: 'survey-multi-choice',
    questions: ["What is the range of node values?", "What is the cost of clicking on a node to find out its value?", "Will you receive a bonus?", "Will each round be the same?"],
    options: [['$0 to $50', '$-10 to $10', '$-100 to $100', '$-250 to $250'], ['$0', '$1', '$5', '$10'], ['No.', 'I will receive a $1 bonus regardless of my performance.', 'I will receive a $1 bonus if I perform well, else I will receive no bonus.', 'The better I perform the higher my bonus will be.'], ['Yes.', 'No, the amount of cash at each node of the web may be different each time.', 'No, the structure of the web will be different each time.']],
    required: [true, true, true, true],
    correct: ['$-250 to $250', '$1', 'The better I perform the higher my bonus will be.', 'No, the amount of cash at each node of the web may be different each time.']
  });

  pre_test_intro1 = new TextBlock({
    text: function() {
      SCORE = 0;
      //prompt: ''
      //psiturk.finishInstructions()
      return markdown("## Node Inspector\n\nIt's hard to make good decision when you can't see what you will get!\nFortunately, you will have access to a ***node inspector*** which can reveal\nthe value of a node. \n\nTo use the node inspector, simply ***click on a node***. The image below illustrates how this works, and you can try this out on the **next** screen. \n\n**Note:** you can only use the node inspector when you're on the first\nnode. \n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/web-of-cash.png'/>\n\nOne more thing: **You must spend *at least* 7 seconds on each round.**\nIf you finish a round early, you'll have to wait until 7 seconds have\npassed.      \n\n<div align=\"center\"> Press <code>space</code> to continue. </div>\n");
    }
  });
  pre_test_intro2 = new TextBlock({
    text: function() {
      SCORE = 0;
      //prompt: ''
      //psiturk.finishInstructions()
      return markdown("## Get ready!\n\nYou are about to play your first round of Web of Cash. You will notice that the web used in this game is larger than the example you saw in the previous pictures. But that is the only difference, and everything else works as described. Good luck!\n\n<div align=\"center\"> Press <code>space</code> to continue. </div>\n");
    }
  });
  play_next_time = new TextBlock({
    text: function() {
      return markdown("# Come back tomorrow\n\nThank you for reading! This is all for today. To play this game, please come back tomorrow.\n\n<div align=\"center\"> Press <code>space</code> to continue. </div>");
    }
  });
  principle1 = new TextBlock({
    text: function() {
      return markdown("# A principle for making better decisions\n\nAs we go through our lives we are often drawn to immediate pleasures and avoid doing things that are unpleasant. For instance, we watch a Youtube video because it promises immediate fun, but we put off filing our taxes because that feels difficult.\n\nHighly successful people, like Elon Musk, make their decisions very differently: They **first think about all the things they could achieve in the long-term**, **pick one of them as their goal**, and then **do what it takes to get there** -- even if they are painful in the short-run. \n\n<div align=\"center\"> Press <code>space</code> to continue. </div>");
    }
  });
  principle2 = new TextBlock({
    text: function() {
      return markdown("# A principle for making better decisions\n\nYou too can apply this goal-setting principle to make better decisions. Here is how:\n<ol>    \n<li><b>Imagine what your life could be like in the future.</b> </li>\n<li><b>Choose which of those futures you want to create.</b></li>\n<li><b>Set yourself the goal to make that happen.</b></li>\n<li><b>Plan how to achieve the goal and act accordingly.</b></li>\n</ol>\n\n<div align=\"center\"> Press <code>space</code> to continue. </div>\n");
    }
  });
  retention_instruction = new Block({
    type: 'button-response',
    is_html: true,
    choices: ['Continue'],
    button_html: '<button class="btn btn-primary btn-lg">%choice%</button>',
    stimulus: function() {
      return markdown(`# You are beginning a two-stage experiment\n\nThis experiment has two stages which you will complete in separate HITs.\nThe total base payment for both HITs is $2.00.\n\nStage 1 takes about 5 minutes. Its base pay is only $0.20. But you will also earn a $0.55 bonus and it makes you eligible\nto participate in Stage 2 where you can earn $1.90 in 10 minutes plus a performance-dependent\nbonus of up to $3.50 ($1.30 is a typical bonus). \nYou will complete Stage 2 in a second HIT which you can begin ${text.return_window()}.\nIf you do not begin the HIT within this time frame, you lose the bonus from Stage 1 and will miss out on the\nmuch more lucrative second part of this experiment.           \n\nBy completing both stages, you can make up to\n$5.50, but if you don't complete Stage 2, you will lose your bonus from Stage 1 and the HIT would be a very bad deal for you.\n\n<div class="alert alert-warning">\n  Please do <b>NOT<b> continue unless you are certain that you will complete the second HIT which\n  which becomes available ${text.return_window()}. Completing only the first HIT would be a very bad deal for you (corresponding to a wage of $1.20/hour) and it would be bad for us too. You will be much better of if you complete both HITs (corresponding to a wage of about $15.20/hour.) and we need that for our experiment to work.\n</div>`);
    }
  });

  fullMessage = "";
  reset_score = new Block({
    type: 'call-function',
    func: function() {
      return SCORE = 0;
    }
  });

  divider = new TextBlock({
    text: function() {
      SCORE = 0;
      return "<div style='text-align: center;'> Press <code>space</code> to continue.</div>";
    }
  });
  divider_training_test = new TextBlock({
    text: function() {
      SCORE = 0;
      return "<div style='text-align: left;'> Congratulations! You have completed the training block. <br/> <br/> Press <code>space</code> to start the test block.</div>";
    }
  });
  test_block_intro = new TextBlock({
    text: function() {
      SCORE = 0;
      return markdown(`<h1>Web of Cash</h1>\nGet ready to play Web of Cash! \nIn this game ${bonus_text('long')} <br/> \nTo thank you for your work so far, we'll start you off with **$100**.\nGood luck! \n<div style='text-align: center;'> Press <code>space</code> to continue. </div>`);
    }
  });
  //divider_intro_training  = new TextBlock
  //    text: ->
  //      SCORE = 0
  //      "  <h1>Training</h1>  Congratulations! You have completed the instructions. Next, you will enter a training block where you can practice planning 10 times. After that, you will enter a test block where you can use what you have learned to earn a bonus. <br/> Press <code>space</code> to start the training block."
  divider_pretest_training = new TextBlock({
    text: function() {
      SCORE = 0;
      return "<h1>Training block</h1> <p> The game you just played is quite complex and it can be rather difficult to get it right. To help you master it, we will now let you practice on a simplified version of this game 10 times. </p> <p> In the simplified version your goal is to find the most profitable route of an airplane across a network of airports. There will be only three steps but otherwise the game works just like the one you just played. </p> <p>After that, there will be a test block where you can use what you have learned to earn a bonus. </p> <br/> Press <code>space</code> to start the training block.</div>";
    }
  });
  train_basic1 = new TextBlock({
    text: function() {
      SCORE = 0;
      return markdown("<h1> Practice makes perfect </h1>\n\nIn this HIT, you can try out and practice the goal-setting principle to make better decisions in a simple \ngame called *Flight Planning*. You will navigate an airplane across a network of airports (gray nodes). The  value inside each circle shows you how profitable it is to fly there. When you land on a gray circle\n(a ***node***) the value of the node is added to your score.\n\nYou will be able to move the plane with the arrow keys, but only in the direction\nof the arrows between the nodes. The image below shows the network of airports.\n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/flight-planning-unrevealed.png'/>\n\n<div align=\"center\">Press <code>space</code> to proceed.</div>");
    }
  });
  train_basic2 = new TextBlock({
    text: function() {
      SCORE = 0;
      return markdown("<h1> Flight Planning </h1>\n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/web-words.png'/>\n\nThe flight planning game is a metaphor for life.    \nThe central circle that you start from represents your present circumstances. The six circles at the end of each path represent your possible futures. The circles in-between show the different paths you can take and how rewarding or unrewarding they are in the short-term.\n\nWhenever you move to the circle the value inside of it is added to your total score.        \n\n<div align=\"center\">Press <code>space</code> to proceed.</div>");
    }
  });
  train_basic3 = new TextBlock({
    text: function() {
      SCORE = 0;
      return markdown("   <h1> Node Inspector </h1>\n\n   Initially, all of the rewards will be hidden. It is hard to decide where to go when you don't know the rewards. Fortunately, you will have access to a ***node inspector*** which can reveal\n the value of a node. \n\nTo use the node inspector, simply ***click on a node***. The image below illustrates how this works, and you can try this out on the **next** screen. \n\n **Note:** You can only use the node inspector when you're on the first\n node. \n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/flight-planning.png'/>\n\n One more thing: **You must spend *at least* 7 seconds on each round.**\n If you finish a round early, you'll have to wait until 7 seconds have\n passed.      \n");
    }
  });
  train_basic4_FB = new TextBlock({
    text: function() {
      SCORE = 0;
      return markdown("<h1> Practice the goal-setting principle </h1>\n\nWe will now let you practice applying the goal setting principle in the Flight Planning game. You will find that correctly applying this principle will give you the best possible results in this game.\n\nFurthermore, we will give you click-by-click feedback on whether you applied the goal setting principle correctly.\n\nAfter having practiced this principle 10 times you will hopefully be able to apply this principle to your own life if you want to.\n");
    }
  });
  train_basic4_noFB = new TextBlock({
    text: function() {
      SCORE = 0;
      return markdown("<h1> Practice the goal-setting principle </h1>\n\nWe will now let you practice applying the goal setting principle in the Flight Planning game. You will find that correctly applying this principle will give you the best possible results in this game.\n\nAfter having practiced this principle 10 times you will hopefully be able to apply this principle to your own life if you want to.\n");
    }
  });
  demo_basic0 = new TextBlock({
    showPage: true,
    text: function() {
      SCORE = 0;
      return markdown("<h1>Structure of the HIT</h1>\n\n In this HIT, you will participate in a psychology experiment. This experiment has three phases: \n\n- **Instructions:**: In this phase, you will be introduced to the experiment and will be given instructions about it. \n\n- **Training:** In this phase, you will be trained on how to make choices \n\n- **Test:** In this phase, you will be tested on your learning in the training phase.\n\nIf you complete the HIT, you will receive a base pay of $0.5 and a bonus which is dependent on your performance in the test phase. <div align=\"center\">Press <code>space</code> to proceed.</div>");
    }
  });
  demo_basic1 = new TextBlock({
    text: function() {
      SCORE = 0;
      return markdown("<h1>Flight Planning </h1>\n\nIn this HIT, you will be playing a \ngame called *Flight Planning*. During the game, you will navigate an airplane across a network of airports (gray nodes in the image below). Each airport has an underlying value tells you how much money the airline makes or loses by operating that flight. \n\n At the start of the game, the rewards underlying the airports are hidden. You start from the bottom row and can move the plane forward in the direction of the arrows between the airports (**nodes**) using the number keys 1, 2, 3 and 4. \n\nWhen you land on a airport, its value is revealed and added to your score. \n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/web-words.png'/>\n\n<div align=\"center\">Press <code>space</code> to proceed.</div>");
    }
  });
  demo_basic2 = new TextBlock({
    text: function() {
      SCORE = 0;
      return markdown("<h1> Flight Planning </h1>\n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/web-revealed.png'/>\nYou start from the bottom row and proceed upward to reach one of the top 3 nodes. The circles in-between show the different paths you can take and how rewarding or penalizing they are in the short-term.\n\nWhenever you make a move, the value inside the circle that you moved to is added to your total score.\n \n\n<div align=\"center\">Press <code>space</code> to proceed.</div>");
    }
  });
  demo_basic3 = new TextBlock({
    text: function() {
      SCORE = 0;
      console.log("HI");
      return markdown("   <h1> Node Inspector</h1>\n\n It is hard to decide where to go when you don't know the rewards. Fortunately, you can use a ***node inspector*** to reveal\n the value underlying a node. \n\nTo use the node inspector, you have to simply ***click on a node***. \n\n To understand how it works, you can look at the image below. \n\n **Note:** You can only use the node inspector when you're on the initial\n node, i.e. before you have moved. \n\n \n\n<img class='display' style=\"width:90%; height:auto\" src='static/images/web.png'/>\n\n \n\n<div align=\"center\">Press <code>space</code> to proceed.</div>");
    }
  });

  demo_basic4 = new TextBlock({
    text: function() {
    SCORE = 0;
      return markdown("<h1> Important information</h1>\n\n  There are a few things that should be kept in mind: \n\n- Each node has an underlying reward of up to <b><font color='green'>$48</font></b> and a loss of up to <b><font color='red'>-$48</font></b>. \n\n- Using the node inspector incurs **a cost of $1 per click**.\n\n- You will go through multiple rounds of the game and each round can have different rewards under the nodes.  \n\n<div align=\"center\">Press <code>space</code> to proceed.</div>");
    }
  });
  demo_basic5 = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function() {
      console.log('Demo_basic5');
      return [markdown("<h1> Additional Important information</h1>\n\n  Additionally: \n\n- You have to spend at least 7 seconds on each round even if you finish it early. \n\n- You will earn a performance dependent bonus of **1 cent** for every **$10** you make in the game. Only the score you obtain in the **test phase** of the experiment will be considered towards your bonus and you will be notified when the test phase starts.\n\n<h4> Tip</h4>- When you click a node and find out that there is a **large positive reward**\n then you could move to it.\n- Finding out that a flight would incur a **large loss** is a good thing when it allows you to **avoid flying there** later on. \n\n\n\n")];
    }
  });

  quiz1 = new Block({
    preamble: function() {
      return markdown("# Quiz\n\nPlease answer the following questions about the *Flight Planning* game. Questions marked with (*) are compulsory\n");
    },
    type: 'survey-multi-choice',
    questions: ["What is the range of node values?", "What does the numbers on the edge represent?", "What is the cost of clicking on a node to find out its value?", "Will each round be the same?","If you find a big negative reward while inspecting a node, then "],
    options: [['$0 to $50', '$-10 to $10', '$-100 to $100', '$-250 to $250'], ['The numbers represent the reward/cost for taking that path', 'The numbers on the edge are the keys to move the plane along the path', 'The numbers are irrelevant and should be ignored'],['$0', '$1', '$5', '$10'], ['Yes.', 'No, the value underlying each node of the network may be different each time.', 'No, the structure of the network will be different each time.'],['It is bad for me as I got a negative reward.','It is good as I can avoid that node on my way.']],
    required: [true, true, true,true, true],
    correct: ['$-250 to $250', 'The numbers on the edge are the keys to move the plane along the path', '$1', 'No, the value underlying each node of the network may be different each time.','It is good as I can avoid that node on my way.']
  });

  tryout1 = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function(){
      SCORE = 0;
      return [markdown("   <h1> Practice</h1>\n\n In the next five rounds, you will be given a chance to try out the node inspector and move the airplane so that you get used to the game.\n\n**Enjoy flying!**\n\n</div>")];
    }
  });
  no_demo_tryout = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function(){
      SCORE = 0;
      return [markdown("   <h1> Practice</h1>\n\n In the next ten rounds, you will be given a chance to explore the environment and try to find the optimal flight planning strategy.\n\n**Enjoy flying!**\n\n</div>")];
    }
  });
  tryout_trace = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function(){
      SCORE = 0;
      return [markdown("   <h1> Follow the path</h1>\n\n In the next round, a path of revealed nodes would be presented to you. Try to trace the path. **This exercise is just for you to get used to the movement keys and may not be indicative of the optimal strategy.**\n The key to transition to a given node is presented below:\n\n\n<img class='display' style=\"width:90%; height:auto\" src='static/images/web_text.png'/>\n\n</div>")];
    }
  });
  tryout2 = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function(){
      SCORE = 0;
      return [markdown("   <h1> Training </h1>\n\n This is the start of the training phase of the experiment. \n\n\n In all the rounds that follow: \n\n- Each row only has one node with a high positive/negative value.\n\n- In the bottom two rows, the large positive/negative node is in the same column. \n\nSuppose that for the next round, you were given the following additional hint about the rewards:\n\n ***The left column of each row contains the largest positive/negative rewards.***\n\n Can you decide which nodes should be inspected and which shouldn't be? \n\n *Try it out on the next page!* \n")];
    }
  });

  tryout3 = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function() {
      SCORE = 0;
      return [markdown("   <h1> Good strategy </h1>\n\n  \n\n- In the previous example, a good strategy would have been to click only nodes in the **left** column and then choose the best route given the available information! \n\n- A demonstration of this strategy can be found in the next page.\n")];
    }
  });


   tryout4 = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function(){
      SCORE = 0;
      return [markdown("   <h1> One more example </h1>\n\n Hope you got the trick! Let's try another example. \n\n  How would you plan given the following hint? \n\n <b>In the top row, large positive/negative rewards are present in the left column.\n\n And in the bottom two rows, large positive/negative rewards are present in right column.<b>\n\n")];
    }
  });

tryout5 = new TextBlock({
    text: function() {
      SCORE = 0;
      return markdown("   <h1> Possible environment vs. Real environment </h1>\n\n - Let's call the structure in which the flight moves as an environment\n- **Real environment** - Is the actual environment in which you move. Underlying rewards are revealed only when clicked on node.\n- **Possible environment** - It is a hint (en example environment) provided by us with all the underlying rewards revealed\n\n\n **Important: The possible environment is just a hint and the real environment rewards would be different. But you can get an idea of the real rewards and accordingly plan where to click!**\n       \n\n<div align=\"center\">Press <code>space</code> to proceed.</div>  ");
    }
  });


quiz2 = new Block({
    preamble: function() {
      return markdown("# Quiz\n\nPlease answer the following questions.\n");
    },
    type: 'survey-multi-choice',
    questions: ["Environment in which you need to click and move:", "A hint environment with all the rewards revealed: ", "Rewards underlying in Possible environment and Real environment are same"],
    options: [['Possible environment', 'Real environment', 'Demo environment'], ['Possible environment', 'Real environment', 'Demo environment'], ['True.', 'False']],
    required: [true, true, true],
    correct: ['Real environment', 'Possible environment', 'False']
  });

instruct_loop5 = new Block({
    timeline: [tryout5, quiz2],
    loop_function: function(data) {
      var c, i, len, ref;
      ref = data[1].correct;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (!c) {
          alert("You got at least one question wrong. We'll send you back to the\n previous information page and then you can try again.");
          return true; // try again
        }
      }
      psiturk.finishInstructions();
      psiturk.saveData();
      return false;
    }
  });

	quiz3 = new Block({
    preamble: function() {
      return markdown("# Quiz\n\nPlease answer the following questions.\n");
    },
    type: 'survey-multi-choice',
    questions: ["What were the range of node values", " In which row the click was always on the same column", "In which two rows did you find the rewards related"],
    options: [['-10 to +10', '-24 to +24', '-48 to +48'], ['top', 'middle', 'botton'], ['top and middle row.', 'middle and bottom row','top and bottom row']],
    required: [false, false, false],
    correct: ['-48 to +48', 'top','middle and bottom row']
  });

	quiz4 = new Block({
    preamble: function() {
      return markdown("# Quiz\n\nPlease answer the following questions.\n");
    },
    type: 'survey-multi-choice',
    questions: ["What were the range of node values", " In which row the click was always on the same column", "In which two rows did you find the rewards related"],
    options: [['-10 to +10', '-24 to +24', '-48 to +48'], ['top', 'middle', 'botton'], ['top and middle row.', 'middle and bottom row','top and bottom row']],
    required: [false, false, false],
    correct: ['-48 to +48', 'top','middle and bottom row']
  });


  demo2_hier = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function() {
      //Next up, **unlike** in the previous examples, we do not say where the nodes with large positive/negative value are located.\n\n
      //\n\n**Important note**:\n\n The locations of the rewards are about to change. The hints we gave you earlier about the exact positions of the large values are no longer applicable.\n
      return [markdown("   <h1> Learn from the experts </h1>\n\n- As you might have understood from the previous trials, the magnitude of rewards vary. \n\n- Therefore, it would help if you knew which nodes to click to get the most important information.\n\n- On the next few pages, you'll see demonstrations of an expert tutor on a particular set of environments which will be similar but not exactly the same.\n\n- The expert tutor will teach you a general strategy that works well on this particular set of environments."), markdown("   <h1> Learn from the experts </h1>\n\n- The general strategy has been broken down into **two sub-strategies** and will be demonstrated separetely before showing the combined strategy. \n\n- The first sub-strategy is to **set the goal** and the second sub-strategy is to **plan how to achieve the selected goal**\n\n- Please observe the demonstrations carefully as your testing phase will contain environments that are similar to the ones shown in the next few pages.\n\n- On the following page an expert tutor will demonstrate the **first part** of the best possible strategy for playing the Flight Planning game to you. We recommend that you pay close attention to it so that you can use it to earn the maximum number of points in the subsequent game.")];
    }
  });


  demo2 = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function() {
      //Next up, **unlike** in the previous examples, we do not say where the nodes with large positive/negative value are located.\n\n
      //\n\n**Important note**:\n\n The locations of the rewards are about to change. The hints we gave you earlier about the exact positions of the large values are no longer applicable.\n
      return [markdown("   <h1> Learn from the experts </h1>\n\n- As you might have understood from the previous trials, the magnitude of rewards vary. \n\n- Therefore, it would help if you knew which nodes to click to get the most important information.\n\n- On the next few pages, you'll see demonstrations of an expert tutor on a particular set of environments which will be similar but not exactly the same.\n\n- The expert tutor will teach you a general strategy that works well on this particular set of environments. \n\n- Please observe the demonstrations carefully as your testing phase will contain environments that are similar to the ones shown in the next few pages.\n\n- On the following page an expert tutor will demonstrate the best possible strategy for playing the Flight Planning game to you. We recommend that you pay close attention to it so that you can use it to earn the maximum number of points in the subsequent game.")];
    }
  });

  quiz5 = new Block({
    preamble: function() {
      return markdown("# Quiz\n\nPlease answer the following questions. Questions marked with (*) are compulsory.\n");
    },
    type: 'survey-multi-choice',
    //"In the next pages, what kind of a strategy will the expert tutor demonstrate?"
    //'One that works well on a set of similar environments.'
    questions: ["How will you find out where to click during your testing phase?"],
    options: [['The position of high magnitude reward nodes will be told to me.', 'I have to observe the expert tutor in the next pages, learn the strategy it is demonstrating and apply this strategy in the test phase.']],
    required: [true],
    correct: ['I have to observe the expert tutor in the next pages, learn the strategy it is demonstrating and apply this strategy in the test phase.']
  });

  quiz5_hier = new Block({
    preamble: function() {
      return markdown("# Quiz\n\nPlease answer the following questions. Questions marked with (*) are compulsory.\n");
    },
    type: 'survey-multi-choice',
    //"In the next pages, what kind of a strategy will the expert tutor demonstrate?"
    //'One that works well on a set of similar environments.'
    questions: ["How will you find out where to click during your testing phase?", "How will the strategy be demonstrated?", "In which order will the sub-strategies be demonstrated?"],
    options: [['The position of high magnitude reward nodes will be told to me.', 'I have to observe the expert tutor in the next pages, learn the strategy it is demonstrating and apply this strategy in the test phase.'], ['The strategy would be shown in two parts separately and then the combined strategy would be shown', 'The complete strategy would be shown to me in all demonstrations'], ['The sub-strategies will be presented in a random order', '1. Demonstration of goal setting, 2. Demonstration of planning how to get to a goal, and 3. Demonstration of the combined strategy', 'There are no sub-strategies']],
    required: [true, true,true],
    correct: ['I have to observe the expert tutor in the next pages, learn the strategy it is demonstrating and apply this strategy in the test phase.', 'The strategy would be shown in two parts separately and then the combined strategy would be shown', '1. Demonstration of goal setting, 2. Demonstration of planning how to get to a goal, and 3. Demonstration of the combined strategy']
  });

instruct_loop3_hier = new Block({
    timeline: [demo2_hier, quiz5_hier],
    loop_function: function(data) {
      var c, i, len, ref;
      ref = data[1].correct;
      console.log(data);
      console.log('d1');
      console.log(data[1]);
      console.log('ref');
      console.log(ref);
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (!c) {
          alert("You got at least one question wrong. We'll send you back to the\n previous information page and then you can try again.");
          return true; // try again
        }
      }
      psiturk.finishInstructions();
      psiturk.saveData();
      return false;
    },
  });

instruct_loop3 = new Block({
    timeline: [demo2, quiz5],
    loop_function: function(data) {
      var c, i, len, ref;
      ref = data[1].correct;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (!c) {
          alert("You got at least one question wrong. We'll send you back to the\n previous information page and then you can try again.");
          return true; // try again
        }
      }
      psiturk.finishInstructions();
      psiturk.saveData();
      return false;
    },
  });
  demo3_hier = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function() {
      //Next up, **unlike** in the previous examples, we do not say where the nodes with large positive/negative value are located.\n\n
      //\n\n**Important note**:\n\n The locations of the rewards are about to change. The hints we gave you earlier about the exact positions of the large values are no longer applicable.\n
      return [markdown("   <h1> Learn from the experts </h1>\n\n- From the previous trials, you might have understood the first part of the strategy. \n\n - Now the next part of the best possible strategy would be demonstrated. \n\n - Please observe the demonstrations carefully as your testing phase will contain environments that are similar to the ones shown in the next few pages.\n\n- On the following page an expert tutor will **continue after the first part and demonstrate the second part** of the best possible strategy for playing the Flight Planning game to you.")];
    }
  });
  demo3 = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function(){
      return [markdown("   <h1> Learn from the experts </h1>\n\n\n These were the first three demonstrations of the expert tutor. Take a moment to think about what you have learned from the demonstrations so far. What do you still need to understand better before you would be able to describe this strategy to a friend? \n\n\n\n You can see a few more demonstrations and watch them closely to figure out what you haven’t understood yet. \n\n You will see seven more demonstrations now. \n\n\n**After the demonstrations, you will be tested. Your bonus will depend on your score in the test phase. You have a higher chance of getting a high score if you learn and apply the expert tutor's strategy.**\n")];
    }
  });
  demo4_hier = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function(){
      return [markdown("   <h1> Learn from the experts </h1>\n\n\n These were the first six demonstrations of the expert tutor. Take a moment to think about what you have learned from the demonstrations so far. What do you still need to understand better before you would be able to describe this strategy to a friend? \n\n\n\n You can see a few more demonstrations and watch them closely to figure out what you haven’t understood yet.  \n\nYou will see four more demonstrations of the complete strategy now. \n\n\n**After the demonstrations, you will be tested. Your bonus will depend on your score in the test phase. You have a higher chance of getting a high score if you learn and apply the expert tutor's strategy.**\n")];
    }
  });
  demo4 = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function() {
      //In the previous demonstrations, you saw that the environments in each example varied, yet there was a good strategy to obtain information about the values of the nodes.
      return [markdown("   <h1> Test phase </h1>\n\n\n - The strategy the expert tutor just demonstrated to you is the best possible one. Now you can use what you have learned from the expert tutor to play the game yourself. \n\n\n\n The next phase of the experiment is the **test** phase. \n\n\n - During this phase: \n\n\n- You will play 15 rounds of the game. \n\n\n- You will start with an initial score of $50 \n\n\n- **Your bonus is determined by your performance (score) in these rounds. Please try to earn as many points as possible.**\n\n\n- Remember that inspecting a node has a $1 cost.\n\n\n**All the best! Have a good flight.**\n")];
    }
  });

  no_demo_test = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function() {
      SCORE = 0;
      return [markdown("   <h1> Test phase </h1>\n\n\n The next phase of the experiment is the **test** phase. \n\n\n - During this phase: \n\n\n- You will play 15 rounds of the game. \n\n\n- You will start with an initial score of $50 \n\n\n- **Your bonus is determined by your performance (score) in these rounds. Please try to earn as many points as possible.**\n\n\n- Remember that inspecting a node has a $1 cost.\n\n\n**All the best! Have a good flight.**\n")];
    }
  });

  bonus_text = function(long) {
    var s;

    // if PARAMS.bonusRate isnt .01
    //   throw new Error('Incorrect bonus rate')
    s = "**you will earn 20 cent for every $100 you make in the game.**";
    if (long) {
      s += " For example, if your final score is $500, you will receive a bonus of $1.";
    }
    return s;
  };

  survey = new Block({
    type: 'survey-text',
    preamble: function() {
      return markdown("# Just one question ...\n    ");
    },
    questions: ['What have you learned? What have you learned? What are you doing differently now from what you were doing at the beginning of this training session?'],
    button: 'Finish'
  });

  demo_temp1 = new DemoBlock({
    showImage:false,
    //lowerMessage: "<b> Tutor demonstration<b>",
    lowerMessage: "Please do not leave the current tab or the window during the demonstration.",
    minTime: 7,
    show_feedback: with_feedback,
    blockName: 'demo_temp1',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: DEMO_TRIALS.slice(0, 1),
    startScore: 50,
    _init: function() {
        _.extend(this, TRAIN_STRUCTURE_TRAINING);
        this.playerImage = 'static/images/plane.png';
        return this.trialCount = 0;
      }
  });
  test_trace = new MouselabBlockTrace({
  	  trace: true,
  	  showImage:false,
      minTime: 0,
      show_feedback: with_feedback,
      blockName: 'test1',
      stateDisplay: 'click',
      stateClickCost: PARAMS.inspectCost,
      timeline: TRIALS_TEST.slice(-1),
      startScore: 50,
      _init: function() {
        console.log('-1');
        _.extend(this, TEST_STRUCTURE_TRAINING);
        this.playerImage = 'static/images/plane.png';
        return this.trialCount = 0;
      }
    });
  test_temp1 = new MouselabBlock({
  	  showImage:false,
      minTime: 7,
      show_feedback: with_feedback,
      blockName: 'test1',
      stateDisplay: 'click',
      stateClickCost: PARAMS.inspectCost,
      timeline: TRIALS_TEST.slice(0, 2),
      startScore: 50,
      _init: function() {
        _.extend(this, TEST_STRUCTURE_TRAINING);
        this.playerImage = 'static/images/plane.png';
        return this.trialCount = 0;
      }
    });
  no_demo_test_temp1 = new MouselabBlock({
      showImage:false,
      minTime: 7,
      show_feedback: with_feedback,
      blockName: 'no_demo_test1',
      stateDisplay: 'click',
      stateClickCost: PARAMS.inspectCost,
      timeline: TRIALS_TEST.slice(2, 12),
      startScore: 50,
      _init: function() {
        _.extend(this, TEST_STRUCTURE_TRAINING);
        this.playerImage = 'static/images/plane.png';
        return this.trialCount = 0;
      }
    });

    test_temp1_mod = new MouselabBlock({
  	  showImage:false,
      minTime: 7,
      show_feedback: false,
      blockName: 'test1',
      stateDisplay: 'click',
      stateClickCost: PARAMS.inspectCost,
      timeline: TRIALS_TEST.slice(2, 5),
      startScore: 50,
      _init: function() {
        _.extend(this, TEST_STRUCTURE_TRAINING);
        this.playerImage = 'static/images/plane.png';
        return this.trialCount = 0;
      }
    });

  test_temp2 = new MouselabBlock({
  	  showImage:false,
      minTime: 7,
      show_feedback: false,
      blockName: 'test2',
      stateDisplay: 'click',
      stateClickCost: PARAMS.inspectCost,
      timeline: TRIALS_TEST.slice(5, 6),
      startScore: 50,
      _init: function() {
        _.extend(this, TEST_STRUCTURE_TRAINING);
        this.playerImage = 'static/images/plane.png';
        return this.trialCount = 0;
      }
    });

  test_temp3 = new MouselabBlock({
  	  showImage:false,
      minTime: 7,
      show_feedback: false,
      blockName: 'test3',
      stateDisplay: 'click',
      stateClickCost: PARAMS.inspectCost,
      timeline: TRIALS_TEST.slice(6, 7),
      startScore: 50,
      _init: function() {
        _.extend(this, TEST_STRUCTURE_TRAINING);
        this.playerImage = 'static/images/plane.png';
        return this.trialCount = 0;
      }
    });

  demo_temp2 = new DemoBlock({
    showImage:false,
    //lowerMessage: "<b> Tutor demonstration<b>",
    minTime: 7,
    show_feedback: with_feedback,
    blockName: 'demo_temp2',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: DEMO_TRIALS.slice(1,2),
    startScore: 50,
    _init: function() {
        _.extend(this, TRAIN_STRUCTURE_TRAINING);
        this.playerImage = 'static/images/plane.png';
        return this.trialCount = 0;
      }
  });
  demo_main1_hier = new DemoBlock_gs({
  	showImage:false,
    //lowerMessage: "<b> Tutor demonstration<b>",
    lowerMessage: markdown("**Demonstration of goal setting**\n\nPlease do not leave the current tab or the window during the demonstration."),
    upperMessage: markdown("**Demonstration of goal setting**"),
    minTime: 10,
    show_feedback: with_feedback,
    blockName: 'demo_main1_hier',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: DEMO_TRIALS.slice(2,5),
    startScore: 50,
    _init: function() {
        _.extend(this, TRAIN_STRUCTURE_TRAINING);
        this.playerImage = 'static/images/plane.png';
        return this.trialCount = 0;
      }
  });

  demo_main1 = new DemoBlock({
  	showImage:false,
    //lowerMessage: "<b> Tutor demonstration<b>",
    lowerMessage: "Please do not leave the current tab or the window during the demonstration.",
    minTime: 10,
    show_feedback: with_feedback,
    blockName: 'demo_main1',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: DEMO_TRIALS.slice(2,5),
    startScore: 50,
    _init: function() {
        _.extend(this, TRAIN_STRUCTURE_TRAINING);
        this.playerImage = 'static/images/plane.png';
        return this.trialCount = 0;
      }
  });
  demo_main2_hier = new DemoBlock_hier({
  	showImage:false,
    //lowerMessage: "<b> Tutor demonstration<b>",
    lowerMessage: markdown("**Demonstration of planning how to get to a goal** \n\nPlease do not leave the current tab or the window during the demonstration."),
    upperMessage: markdown("**Demonstration of planning how to get to a goal**"),
    minTime: 10,
    show_feedback: with_feedback,
    blockName: 'demo_main2_hier',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: DEMO_TRIALS.slice(5,8),
    startScore: 50,
    _init: function() {
        _.extend(this, TRAIN_STRUCTURE_TRAINING);
        this.playerImage = 'static/images/plane.png';
        return this.trialCount = 0;
      }
  });
  demo_main3_hier = new DemoBlock({
  	showImage:false,
    //lowerMessage: "<b> Tutor demonstration<b>",
    lowerMessage: markdown("**Demonstration of the combined strategy**\n\nPlease do not leave the current tab or the window during the demonstration."),
    upperMessage: markdown("**Demonstration of the combined strategy**"),
    minTime: 10,
    show_feedback: with_feedback,
    blockName: 'demo_main3_hier',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: DEMO_TRIALS.slice(8,12),
    startScore: 50,
    _init: function() {
        _.extend(this, TRAIN_STRUCTURE_TRAINING);
        this.playerImage = 'static/images/plane.png';
        return this.trialCount = 0;
      }
  });
  demo_main2 = new DemoBlock({
  	showImage:false,
    //lowerMessage: "<b> Tutor demonstration<b>",
    lowerMessage: "Please do not leave the current tab or the window during the demonstration.",
    minTime: 10,
    show_feedback: with_feedback,
    blockName: 'demo_main2',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: DEMO_TRIALS.slice(5,12),
    startScore: 50,
    _init: function() {
        _.extend(this, TRAIN_STRUCTURE_TRAINING);
        this.playerImage = 'static/images/plane.png';
        return this.trialCount = 0;
      }
  });


  createRepeatButton = function(){
    console.log('r');
    $('#jspsych-target').append("<div class='center'>\n  <button class='btn btn-primary btn-lg centered' id=\"Repeat\">Repeat</button>\n</div>");
    console.log($('#jspsych-target'));
    $('#Repeat').click(function() {
      console.log('Repeated');
    });
  }

  demo_questions = ["For most of the demonstrations, what is the number of nodes clicked by the expert tutor?"]
  demo_options = [["0-1", "4-7", "9-12", "More than 15"]]

  demo_nonhier_answers = ["4-7"]
  demo_hier_answers = ["9-12"]

  if(CONDITION == 1)
  {
    demo_questions = demo_questions;
    demo_options = demo_options;
    demo_answers = demo_nonhier_answers;
  }
  else
  {
    demo_questions = demo_questions;
    demo_options = demo_options;
    demo_answers = demo_hier_answers;
  }

  repeat_request = new Block({
    type: 'button-response',
    //**The questions that will be asked in the quiz (in the next page) are:**\n\n\n\n - For most of the demonstrations, what is the number of nodes clicked by the expert tutor? \n\n\n\n - Where does the expert tutor click? \n\n\n\n - When does it decide to stop clicking? \n\n\n\n - How would you describe the strategy demonstrated by the expert tutor to a friend such that they would be able to apply this strategy without having seen the demonstrations? \n\n\n\n**
    stimulus: markdown('<h2> End of demonstrations </h2> \n\nYou\'ve reached the end of the demonstrations. \n\n Before you move on to the test phase, you will be **quizzed on the demonstrations of the expert tutor**. Answering the quiz is compulsory and **answering it correctly gives you an extra bonus of $0.5.**\n\n\n\n **If you are unsure about answers to any of these questions, we recommend you to look at the demonstrations again so that you can collect the extra bonus.**'),
    is_html: true,
    choices: ['<img style="margin-bottom: 5px;" src="static/images/left_arrow.png" height="16" width="16"> <b><span style="font-size: 16px;">Repeat the demonstrations</span></b>', '<b><span style="font-size: 16px;">Continue to the quiz</span></b> <img style="margin-bottom: 4px;" src="static/images/right_arrow.png" height="16" width="16">'],
  });

  // Multiple response
  quiz_postdemo = new Block({
    type: 'multi-response',
    stimulus: markdown("# Quiz for additional bonus\n\nPlease answer the following quiz about the *expert tutor*.\n"),
    is_html: true,
    // Multiple choice
    questions: demo_questions,
    options: demo_options,
    required: [true],
    correct: demo_answers,
    // Text
    //pre_question_text: ["When does it decide to stop clicking?", "How would you describe the strategy demonstrated by the expert tutor to a friend such that they would be able to apply this strategy without having seen the demonstrations?"],
    questions_text: ["When did the expert tutor stop uncovering the nodes?"],
    required_text: [true],
    // Next page button
    choices: ['<b><span style="font-size: 16px;">Submit quiz and continue to the test phase</span></b> <img style="margin-bottom: 4px;" src="img/right_arrow.png" height="16" width="16">'],
  });

  postdemo_quiz_pseudo_loop = new Block({
    timeline: [quiz_postdemo],
    loop_function: function(data) {
      var c, i, len, ref;
      console.log(data);
      ref = data[0].correct;
      DEMO_BONUS = 0.50;
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (!c) {
          DEMO_BONUS = 0.0;
        }
      }
      console.log('DEMO_BONUS', DEMO_BONUS);
      psiturk.recordUnstructuredData('demo_bonus', DEMO_BONUS);
      return false;
    }
  });
  demo_loop_hier = new Block({
    timeline: [demo_main3_hier, repeat_request],
    loop_function: function(data) {
      last_trial_data = jsPsych.data.getLastTrialData();
      console.log(last_trial_data);
      dat = last_trial_data.button_pressed;
      if(dat == 0)
      {
        SCORE = 0;
        demo_main3_hier._init();
        return true;
      }
      else
      {
        SCORE = 0;
        return false;
      }
    },
    SCORE: 0
  });

  demo_loop = new Block({
    timeline: [demo_main2, repeat_request],
    loop_function: function(data) {
      last_trial_data = jsPsych.data.getLastTrialData();
      console.log(last_trial_data);
      dat = last_trial_data.button_pressed;
      if(dat == 0)
      {
        SCORE = 0;
        demo_main2._init();
        return true;
      }
      else
      {
        SCORE = 0;
        return false;
      }
    },
    SCORE: 0
  });

  test_main = new MouselabBlock({
  	  showImage:false,
      minTime: 7,
      show_feedback: false,
      blockName: 'test_main',
      stateDisplay: 'click',
      stateClickCost: PARAMS.inspectCost,
      timeline: TRIALS_TEST.slice(7, 22),
      startScore: 50,
      _init: function() {
        _.extend(this, TEST_STRUCTURE_TRAINING);
        this.playerImage = 'static/images/plane.png';
        return this.trialCount = 0;
      }
    });

 final_survey = new Block({
      type: 'survey-text',
      preamble: function() {
        return markdown("# Please answer the following questions:");
      },
      questions: ['At our lab, we believe that all HITs must be approved and that participants must get their specified pay. Therefore, we approve and pay everyone. But this affects the results of our experiments. So, could you please let us know if you followed the instructions and tried your best to get the maximum reward. <br><br> Please answer one of the following: <br> <b> No - I did not try my best to get the maximum score</b> and did not follow the instructions <br> <b> Yes - I tried my best to obtain the maximum score </b> and to follow the instructions. <br><br> We thank you for answering sincerely! (Please note that, even if you answer \'No\', it will not affect your pay in anyway. It will just enable us to do our experiment data analysis better.)<br>', 'What is your age?', 'What gender do you identify with?'],
      button: 'Finish'
    });

//$${calculateBonus().toFixed(2)}
 finish = new Block({
    type: 'survey-text',
    preamble: function() {
      BONUS = calculateBonus();
      if(DEMO_BONUS != 0.0)
      {
        DEMO_text = "For answering the quiz after the demonstrations correctly, you receive an additional bonus of $0.50.\n\n\n"
      }
      else
      {
        DEMO_text = "";
      }
      BONUS = BONUS + DEMO_BONUS;
      BONUS = (Math.round(BONUS * 100)) / 100; //Verify this
      return markdown(`# You've completed the HIT\n\n You've scored a total of **${SCORE}** points. You got a bonus of **1 cent** for every **$10** you made in the test phase of the experiment. ${DEMO_text} \n\n Therefore, you've earned a performance bonus of **$${BONUS}** and a base pay of **$${BASEPAY}**. \n\n Please click on the **"Complete HIT"** button that appears on your dashboard after you submit the HIT here. \n\n Thank you for participating! Hope you enjoyed!`);
    },
    questions: ['Any comments/feedback?'],
    button: 'Submit HIT'
  });


  node_refresher = new TextBlock({
    text: function() {
      return markdown("   <h1> Did you click on the nodes to see the underlying rewards?</h1>\n\n It is hard to decide where to go when you don't know the rewards. Fortunately, you can use a ***node inspector*** to reveal\n the value underlying a node. \n\nTo use the node inspector, you have to simply ***click on a node***. \n\n To understand how it works, you can look at the image below. \n\n **Note:** You can only use the node inspector when you're on the initial\n node, i.e. before you have moved. \n\n \n\n<img class='display' style=\"width:90%; height:auto\" src='static/images/web.png'/>\n\n<div align=\"center\"> Press <code>any key</code> to continue. </div>\n");
    }
  });

  instructions = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function()
    {
      return [markdown("<h1>Structure of the HIT</h1>\n\n In this HIT, you will participate in a psychology experiment. This experiment has three phases: \n\n- **Instructions:** In this phase, you will be introduced to the experiment and will be given instructions about it. \n\n- **Training:** In this phase, you will be taught how to make choices. \n\n- **Test:** In this phase, you will be tested on what you learnt in the training phase.\n\nIf you complete the HIT, you will receive a base pay of $1.2 and a bonus which is dependent on your performance in the test phase."), markdown("<h1>Flight Planning </h1>\n\nIn this HIT, you will be playing a \ngame called *Flight Planning*. During the game, you will navigate an airplane across a network of airports (gray nodes in the image below). Each airport has an underlying value that tells you how much money the airline makes or loses by operating that flight. \n\n At the start of the game, the rewards underlying the airports are hidden. You start from the bottom row and can move the plane forward in the direction of the arrows between the airports using the number keys to move to: **1 (the left-most node or if only node possible from current node), 2 (the second node from left), 3 (the third node from left) and 4 (the fourth node from left)**. The keys to transition to a given node are labelled on each edge as shown in the diagram below.\n\nWhen you land on an airport, its value is revealed and added to your score. \n\n<img class='display' style=\"width:90%; height:auto\" src='static/images/web_text.png'/>"), markdown("   <h1> Node Inspector</h1>\n\n It is hard to decide where to go when you don't know the rewards. Fortunately, you can use a ***node inspector*** to reveal\n the value underlying a node. \n\nTo use the node inspector, you have to simply ***click on a node***. \n\n To understand how it works, you can look at the image below. \n\n **Note:** You can only use the node inspector when you're on the initial\n node, i.e. before you have moved. \n\n \n\n<img class='display' style=\"width:90%; height:auto\" src='static/images/web.png'/>"), markdown("   <h1> Important information</h1>\n\n  There are a few things that should be kept in mind: \n\n- Each node has an underlying reward of up to <b><font color='green'>$250</font></b> and a loss of up to <b><font color='red'>-$250</font></b>. \n\n- Using the node inspector incurs **a cost of $1 per click**.\n\n- You will go through multiple rounds of the game and each round can have different rewards under the nodes."), markdown("   <h1> Additional Important information</h1>\n\n- You have to spend **at least** **7 seconds** on each round even if you finish it early. \n\n- Only the score you obtain in the **test phase** of the experiment will be considered towards your bonus and you will be notified when the test phase starts.\n\n<h4> Tip</h4>- Finding out that a flight would incur a **large loss** is a good thing when it allows you to **avoid flying there** later on. \n\n\n\n")];
    }
  });

  no_demo_instructions = new Block({
    type: 'instructions',
    show_clickable_nav: true,
    pages: function()
    {
      console.log('no demo instructions');
      return [markdown("<h1>Structure of the HIT</h1>\n\n In this HIT, you will participate in a psychology experiment. This experiment has two phases: \n\n- **Instructions:**: In this phase, you will be introduced to the experiment and will be given instructions about it. \n\n- **Test:** In this phase, you will be tested on your ability to do well in the game.\n\nIf you complete the HIT, you will receive a base pay of $1.2 and a bonus which is dependent on your performance in the test phase."), markdown("<h1>Flight Planning </h1>\n\nIn this HIT, you will be playing a \ngame called *Flight Planning*. During the game, you will navigate an airplane across a network of airports (gray nodes in the image below). Each airport has an underlying value that tells you how much money the airline makes or loses by operating that flight. \n\n At the start of the game, the rewards underlying the airports are hidden. You start from the bottom row and can move the plane forward in the direction of the arrows between the airports using the number keys to move to: **1 (the left-most node or if only node possible from current node), 2 (the second node from left), 3 (the third node from left) and 4 (the fourth node from left)**. The keys to transition to a given node are labelled on each edge as shown in the diagram below. \n\nWhen you land on an airport, its value is revealed and added to your score. \n\n<img class='display' style=\"width:90%; height:auto\" src='static/images/web_text.png'/>"), markdown("   <h1> Node Inspector</h1>\n\n It is hard to decide where to go when you don't know the rewards. Fortunately, you can use a ***node inspector*** to reveal\n the value underlying a node. \n\nTo use the node inspector, you have to simply ***click on a node***. \n\n To understand how it works, you can look at the image below. \n\n **Note:** You can only use the node inspector when you're on the initial\n node, i.e. before you have moved. \n\n \n\n<img class='display' style=\"width:90%; height:auto\" src='static/images/web.png'/>"), markdown("   <h1> Important information</h1>\n\n  There are a few things that should be kept in mind: \n\n- Each node has an underlying reward of up to <b><font color='green'>$250</font></b> and a loss of up to <b><font color='red'>-$250</font></b>. \n\n- Using the node inspector incurs **a cost of $1 per click**.\n\n- You will go through multiple rounds of the game and each round can have different rewards under the nodes."), markdown("   <h1> Additional Important information</h1>\n\n- You have to spend **at least** **7 seconds** on each round even if you finish it early. \n\n- Only the score you obtain in the **test phase** of the experiment will be considered towards your bonus and you will be notified when the test phase starts.\n\n<h4> Tip</h4>- Finding out that a flight would incur a **large loss** is a good thing when it allows you to **avoid flying there** later on. \n\n\n\n")];
    }
  });

  instruct_loop1 = new Block({
    timeline: [no_demo_instructions, quiz1],
    loop_function: function(data) {
      var c, i, len, ref;
      ref = data[1].correct; 
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (!c) {
          alert("You got at least one question wrong. We'll send you back to the\n previous information page and then you can try again.");
          return true; // try again
        }
      }
      psiturk.finishInstructions();
      psiturk.saveData();
      return false;
    }
  });

  instruct_loop2 = new Block({
    timeline: [instructions, quiz1],
    loop_function: function(data) {
      var c, i, len, ref;
      ref = data[1].correct;
      console.log(data);
      console.log('d1');
      console.log(data[1]);
      console.log('ref');
      console.log(ref);
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        if (!c) {
          alert("You got at least one question wrong. We'll send you back to the\n previous information page and then you can try again.");
          return true; // try again
        }
      }
      psiturk.finishInstructions();
      psiturk.saveData();
      return false;
    }
  });

   if (false) {
     experiment_timeline = [postdemo_quiz_pseudo_loop];
    // tl.push(demo_basic0);
    // tl.push(demo_basic1);
    // tl.push(demo_basic3);
  } else {
    experiment_timeline = (function() {
      var tl;
      tl = [];
      if(CONDITION == 0)
      {
        tl.push(instruct_loop1);
      }
      else
      {
        tl.push(instruct_loop2);
      }
      tl.push(tryout_trace);
      tl.push(test_trace);
      tl.push(tryout1);
      tl.push(test_temp1);
      tl.push(node_refresher);
      tl.push(test_temp1_mod);

      if(CONDITION == 0) // No demo condition
      {
        tl.push(no_demo_tryout);
        tl.push(no_demo_test_temp1);
        tl.push(no_demo_test);
        tl.push(test_main);
        tl.push(final_survey);
        tl.push(finish);
      }
      else if(CONDITION == 1) // non-hier
      {
        // tl.push(tryout2);
        // tl.push(test_temp2);
        // tl.push(tryout3);
        // tl.push(demo_temp1);
        // tl.push(tryout4);
        // tl.push(test_temp3);
        tl.push(instruct_loop3);
        tl.push(demo_main1);
        tl.push(demo3);
        tl.push(demo_loop);
        tl.push(postdemo_quiz_pseudo_loop);
        tl.push(demo4);
        tl.push(test_main);
        tl.push(final_survey);
        tl.push(finish);
      }
      else if(CONDITION == 2) // hier
      {
        // tl.push(tryout2);
        // tl.push(test_temp2);
        // tl.push(tryout3);
        // tl.push(demo_temp1);
        // tl.push(tryout4);
        // tl.push(test_temp3);
        tl.push(instruct_loop3_hier);
        tl.push(demo_main1_hier);
        tl.push(demo3_hier);
        tl.push(demo_main2_hier);
        tl.push(demo4_hier);
        tl.push(demo_loop_hier);
        tl.push(postdemo_quiz_pseudo_loop);
        tl.push(demo4);

        tl.push(test_main);
        tl.push(final_survey);
        tl.push(finish);
      }

      return tl;
    })();
  }
  calculateBonus = function() {
    var bonus;
    if (STAGE1) {
      console.log(SCORE);
      bonus = SCORE * PARAMS.bonusRate;
      if(bonus > PARAMS.maxBonus)
      {
        bonus = PARAMS.maxBonus
      }
      bonus = (Math.round(bonus * 100)) / 100; // round to nearest cent
      return Math.max(0, bonus);
    }
  };
  reprompt = null;
  save_data = function() {
    return psiturk.saveData({
      success: function() {
        console.log('Data saved to psiturk server.');
        if (reprompt != null) {
          window.clearInterval(reprompt);
        }
        //return psiturk.computeBonus('compute_bonus', psiturk.completeHIT);
        psiturk.completeHIT();
      },
      error: function() {
        return prompt_resubmit;
      }
    });
  };
  prompt_resubmit = function() {
    $('#jspsych-target').html("<h1>Oops!</h1>\n<p>\nSomething went wrong submitting your HIT.\nThis might happen if you lose your internet connection.\nPress the button to resubmit.\n</p>\n<button id=\"resubmit\">Resubmit</button>");
    return $('#resubmit').click(function() {
      $('#jspsych-target').html('Trying to resubmit...');
      reprompt = window.setTimeout(prompt_resubmit, 10000);
      return save_data();
    });
  };
  return jsPsych.init({
    display_element: $('#jspsych-target'),
    timeline: experiment_timeline,
    // show_progress_bar: true
    on_finish: function() {
      if (DEBUG) {
        return jsPsych.data.displayData();
      } else {
        console.log('Finishing Experiment');
        psiturk.recordUnstructuredData('final_bonus', BONUS);
        psiturk.recordUnstructuredData('end_time', Date(Date.now()));
        return save_data();
      }
    },
    on_data_update: function(data) {
      console.log('data', data);
      return psiturk.recordTrialData(data);
    }
  });
};
